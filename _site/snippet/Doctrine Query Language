## Doctrine Query Language
DQL stands for Doctine Query Language is an Object Query language derivate.
In essence,DQL provides poweerful querying capabilities over you object model.

>A common mistake for beginners is to mistake DQL for being just some form of SQL and therefore trying to use table names and column names or join arbitrary tables together in a query. You need to think about DQL as a query language for your object model, not for your relational schema.

## Types of DQL queries
DQL as a query language has `SELECT` `UPDATE` `DELETE`
constructs that map to their corresponding SQL statement types.

`INSERT` statements are not allowed in DQL, because entities and their relations have to be introduced into the persistence context through EntityManager#persist() to ensure consistency of your object model.

### SELECT queries
#### Joins
A `SELECT` query can containe joins.There are 2 types of JOINs:
`REgular` joins and 'Fetch' joins.

***Regular Joins***: Used to limit the results and/or compute aggregate values.

***Fetch Joins***:In addition to the users of regular joins:Used to fetch related
entities and include them in the hydrated result of query.

Regular join of the address:
```
<?php
$query = $em->createQuery("SELECT u FROM User u JOIN u.address a WHERE a.city = 'Berlin'");
$users = $query->getResult();
```
Fetch join of the address:
```
<?php
$query = $em->createQuery("SELECT u, a FROM User u JOIN u.address a WHERE a.city = 'Berlin'");
$users = $query->getResult();
```

#### DQL SELECT Examples
Hydrate all User entities:
```
$query = $em->createQuery('SELECT u FROM MyProject\Model\User u)
```
Retrieve the IDs of all CmsUsers:
```
$query = $em->createQuery(`SELECT u.id From CmsUser u`);
```
Retrieve the IDs of all users that have written an article:
```
$query = $em->createQuery('SELECT DISTINCT u.id FROM CmsArticle a JOIN a.user u');
```
Retrieve all articles and sort them by the name of the articles users instance:
```
$query = $em->createQuery('SELECT a FROM CmsArticle a JOIN a.user u ORDER BY u.name ASC');
```
Retrieve a ForumUser and his single associated entity:
```
$query = $em->createQuery('SELECT u,a FROM ForumUser u JOIN u.avatar a');
```
Using Aggregate Functions:
```
$query = $em->createQuery('SELECT u,count(g.id) FROM Entities\User u JOIN u.groups g GROUP BY u.id');
```
With Nested Confitions in WHERE Clause:
```
$query = $em->createQuery('SELECT u FROM ForumUser u WHERE (u.username = :name OR u.username = :name2) AND u.id = :id');
$query->setParameters(array(
    'name' => 'Bob',
    'name2' => 'Alice',
    'id' => 321,
));
```
Restricting a JOIN clause by additional conditions:
```
$query = $em->createQuery("SELECT u FROM CmsUser u LEFT JOIN u.articles a WITH a.topic LIKE :foo");
$query->seetParameter('foo','%foo%');
```
IN() Expression:
```
$query = $em->createQuery('SELECT u FROM CmsUser u WHERE u.id NOT IN(1)');
```
